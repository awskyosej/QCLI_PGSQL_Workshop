#BUCKET_NAME="my-templates-bucket"
#
## S3 버킷 생성
#aws s3 mb s3://$BUCKET_NAME --region eu-central-1
#
## CloudFormation 템플릿 배포
# aws cloudformation deploy \
#  --region eu-central-1 \
#  --stack-name "VPC01" \
#  --template-file "~/eu_central_1_VPC01.yaml" \
#  --s3-bucket "$BUCKET_NAME" \
#  --capabilities CAPABILITY_NAMED_IAM
#########################################################################################################
# 1 VPC, 1 NATGW, 2 AZ, 1 Public RT, 2 Private RT, 2 Publice Subnet, 4 Private Subnet, 2 Attach Subnet  #
# ap-northeast-2 #
#########################################################################################################

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
         - AvailabilityZoneA
         - AvailabilityZoneB
         - VPCCIDRBlock
         - PublicSubnetABlock
         - PublicSubnetBBlock
         - PrivateSubnetABlock
         - PrivateSubnetBBlock
         - PrivateSubnetCBlock
         - PrivateSubnetDBlock
         - AttachSubnetABlock
         - AttachSubnetBBlock
         - InstanceType1
         - InstanceType2
         - InstanceType3

############################################################################################
############################################################################################
# Create Parmeters                              ############################################
############################################################################################
############################################################################################

################################################################################################
# Create-Parameters : AZ,VPC CIDR Blcok, Public, Private Subnet Block, InstanceType
# PublicKey, AMIid
################################################################################################

Parameters:
  AvailabilityZoneA:
    Description: "Choose AZ1 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2a"
  AvailabilityZoneB:
    Description: "Choose AZ2 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2b"

  VPCCIDRBlock:
    Type: String
    Default: 10.254.0.0/16
    Description: "The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range."

  PublicSubnetABlock:
    Type: String
    Default: 10.254.11.0/24
    Description: "CidrBlock for AZ A public subnet A within the VPC"

  PublicSubnetBBlock:
    Type: String
    Default: 10.254.12.0/24
    Description: "CidrBlock for AZ B public subnet B within the VPC" 

  PrivateSubnetABlock:
    Type: String
    Default: 10.254.21.0/24
    Description: "CidrBlock for AZ A private subnet A within the VPC"

  PrivateSubnetBBlock:
    Type: String
    Default: 10.254.22.0/24
    Description: "CidrBlock for AZ B private subnet B within the VPC"

  PrivateSubnetCBlock:
    Type: String
    Default: 10.254.23.0/24
    Description: "CidrBlock for AZ A private subnet C within the VPC for ElastiCache"

  PrivateSubnetDBlock:
    Type: String
    Default: 10.254.24.0/24
    Description: "CidrBlock for AZ B private subnet D within the VPC for ElastiCache"
 
  AttachSubnetABlock:
    Type: String
    Default: 10.254.251.0/24
    Description: "CidrBlock for AZ A TGW subnet A within the VPC"

  AttachSubnetBBlock:
    Type: String
    Default: 10.254.252.0/24
    Description: "CidrBlock for AZ B TGW subnet B within the VPC"

  InstanceType1:
    Type: String
    Default: "m6i.2xlarge"
    Description: EC2 Instance Type for Basic EC2.

  InstanceType2:
    Type: String
    Default: "m6i.8xlarge"
    Description: EC2 Instance Type for Mgmt EC2.

  InstanceType3:
    Type: String
    Default: "c6i.12xlarge"
    Description: EC2 Instance Type for Performance EC2.

  AmazonLinux2023AmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"

############################################################################################
############################################################################################
# Create Resource                            ###############################################
############################################################################################
############################################################################################

Resources:

############################################################################################
############################################################################################
# Create VPC                                 ###############################################
############################################################################################
############################################################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: project
          Value: !Sub '${AWS::StackName}'

############################################################################################
############################################################################################
# Create IGW                                 ###############################################
############################################################################################
############################################################################################

###############################################################
# Create-IGW: Create VPC InternetGateway and VPC Attach #
###############################################################

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

############################################################################################
############################################################################################
# Create NATGW                               ###############################################
############################################################################################
############################################################################################

#############################################################
# Create-NATGW: Create VPC NATGateway and PublicSubnet Assign
#############################################################

  NatGatewayEIP:
    DependsOn:
    - AttachGateway
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGW-EIP'

  NatGateway:
    DependsOn:
    - NatGatewayEIP
    - PublicSubnetA
    - AttachGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP.AllocationId'
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NATGW'

############################################################################################
############################################################################################
# Create Subnets and RouteTables              ###############################################
############################################################################################
############################################################################################

####################################################
# Create-Public-Subnet: VPC Public_Subnet_a,b #
####################################################

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetA'
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetB'
        - Key: kubernetes.io/role/elb
          Value: 1

################################################
# Create-RouteTable: Public Route Table        #
################################################

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRT'

  PublicRoute:
    DependsOn: AttachGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicSubnetRouteTable

####################################################
# Create-Private-Subnet: VPC Private_Subnet_a,b,c,d #
####################################################

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetA'
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetB'
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCBlock
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetC-ElastiCache'

  PrivateSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetDBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetD-ElastiCache'

################################################
# Create-RouteTable: Private Route Tables      #
################################################

  PrivateSubnetRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRTA'

  PrivateSubnetRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRTB'

  PrivateRouteA:
    DependsOn: NatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRouteB:
    DependsOn: NatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

######################################################################################################
# Associate-Private-RouteTable: VPC Private Subnet Route Table Association
######################################################################################################

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateSubnetRouteTableA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateSubnetRouteTableB

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateSubnetRouteTableA

  PrivateSubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetD
      RouteTableId: !Ref PrivateSubnetRouteTableB

############################################################################################
############################################################################################
# Create Attach Subnets                     ###############################################
############################################################################################
############################################################################################

  AttachSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AttachSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AttachSubnetA'

  AttachSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AttachSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AttachSubnetB'

############################################################################################
############################################################################################
# Create Security Groups                     ###############################################
############################################################################################
############################################################################################

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8888
          ToPort: 8888
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2-SG'

  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ElastiCache Valkey
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElastiCache-SG'

############################################################################################
############################################################################################
# Create ElastiCache Subnet Group and Valkey Cluster ####################################
############################################################################################
############################################################################################

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache Valkey
      SubnetIds:
        - !Ref PrivateSubnetC
        - !Ref PrivateSubnetD
      CacheSubnetGroupName: !Sub '${AWS::StackName}-elasticache-subnet-group'

  ValkeyReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupId: !Sub '${AWS::StackName}-valkey-cluster'
      ReplicationGroupDescription: Valkey cluster with 2 shards (1 writer + 1 reader each)
      Engine: valkey
      TransitEncryptionEnabled : false
      CacheNodeType: cache.r7g.large
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      SecurityGroupIds:
        - !Ref ElastiCacheSecurityGroup
      AutomaticFailoverEnabled: true
      MultiAZEnabled: true
      NumNodeGroups: 2
      ReplicasPerNodeGroup: 1
      Port: 6379
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-valkey-cluster'

############################################################################################
############################################################################################
# Create IAM Role                            ###############################################
############################################################################################
############################################################################################

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2-Role'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

############################################################################################
############################################################################################
# Create EC2 Instances                       ###############################################
############################################################################################
############################################################################################

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinux2023AmiId
      InstanceType: !Ref InstanceType1
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y redis6
          echo "Valkey configuration endpoint: ${ValkeyReplicationGroup.ConfigurationEndPoint.Address}" > /home/ec2-user/valkey-info.txt
          echo "Valkey port: ${ValkeyReplicationGroup.ConfigurationEndPoint.Port}" >> /home/ec2-user/valkey-info.txt
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2'

############################################################################################
############################################################################################
# Outputs                                    ###############################################
############################################################################################
############################################################################################

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  EC2InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-EC2-ID'

  ValkeyConfigurationEndpoint:
    Description: Valkey Configuration Endpoint
    Value: !GetAtt ValkeyReplicationGroup.ConfigurationEndPoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-Valkey-Config-Endpoint'

  ValkeyConfigurationPort:
    Description: Valkey Configuration Port
    Value: !GetAtt ValkeyReplicationGroup.ConfigurationEndPoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-Valkey-Config-Port'